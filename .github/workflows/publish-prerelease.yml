name: Publish Pre-Release to NPM
on:
  # When standard Pull Request is merged
  pull_request:
    branches:
      - master
    types: [ closed ]
jobs:
  createReleasePullRequest:
    if: "!contains(join(github.event.pull_request.labels.*.name, ','), 'Release') && github.event.pull_request.merged == true"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - name: Read .nvmrc
        run: echo "##[set-output name=NVMRC;]$(cat .nvmrc)"
        id: nvm
      - name: Use Node.js (.nvmrc)
        uses: actions/setup-node@v1
        with:
          node-version: "${{ steps.nvm.outputs.NVMRC }}"
      - name: Install Dependencies and Build Packages
        run: make init
      - name: Git Identity
        run: |
          git config --global user.name 'frontegg'
          git config --global user.email 'frontegg@users.noreply.github.com'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Authenticate with Registry
        run: |
          yarn logout
          echo "init-author-name=Frontegg LTD" > .npmrc
          echo "init-author-email=hello@frontegg.com" >> .npmrc
          echo "init-author-url=https://frontegg.com" >> .npmrc
          echo "init-license=MIT" >> .npmrc
          echo "always-auth=true" >> .npmrc
          echo "registry=https://registry.npmjs.org" >> .npmrc
          echo "_authToken=$NPM_TOKEN" >> .npmrc
          echo "@frontegg:registry=https://registry.npmjs.org" >> .npmrc
          echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" >> .npmrc
          npm whoami
        env:
          NPM_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}
      - name: Commit Version UP
        run: |
          yarn lerna version patch --no-git-tag-version --yes --no-push --force-publish
          yarn prettier-hook
      - name: "Copy changelog from admin-portal branch"
        uses: actions/github-script@v6
        with:
          script: |
            const checkNpmVersions = require('./scripts/generate-changelog.js');
            const fs = require("fs");
            const npmIgnore = fs.readFileSync('./.npmignore', { encoding:"utf-8" })
            const npmrc = fs.readFileSync('./.npmrc', { encoding:"utf-8" })
            const libs = ['js', 'react-hooks', 'types', 'redux-store'];
            libs.forEach(lib => {
              fs.writeFileSync(`./dist/@frontegg/${lib}/.npmignore`, npmIgnore, { encoding:"utf-8" });
              fs.writeFileSync(`./dist/@frontegg/${lib}/.npmrc`, npmrc, { encoding:"utf-8" });
            });
      - name: Set current CHANGELOG to output
        id: changelog
        shell: bash -ex {0}
        run: |
          git add . && git commit -m "chore(release): publish `node -p 'require("./lerna.json").version'`"
          version=$(node -p 'require("./lerna.json").version')
          changelog=$(node -p "(function(){var changelog = require('fs').readFileSync('./CHANGELOG.md', {encoding: 'utf8'}); changelog = changelog.substring(changelog.indexOf('# [')); changelog = changelog.substring(changelog.indexOf('\n')).trim();  return changelog.substring(0, changelog.indexOf('# [') - 2)})()")
          changelog="${changelog//'%'/'%25'}"
          changelog="${changelog//$'\n'/'%0A'}"
          changelog="${changelog//$'\r'/'%0D'}"
          echo $changelog
          echo "::set-output name=version::${version}"
          echo "::set-output name=changelog::${changelog}"
      - name: Create Release Pull Request
        id: cpr
        uses: peter-evans/create-pull-request@v3.5.1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          path: ${{ secrets.GITHUB_WORKSPACE }}
          commit-message: "Update v${{ steps.changelog.outputs.version }}"
          committer: GitHub <noreply@github.com>
          author: "${{ github.actor }} <${{ github.actor }}@users.noreply.github.com>"
          title: 'v${{ steps.changelog.outputs.version }}'
          body: |
            # v${{ steps.changelog.outputs.version }}

            ${{steps.changelog.outputs.changelog}}

          labels: "Type: Release"
          branch: "release/next"

      - name: Publish Pre-Release version to NPM
        id: publish_pre_release_version
        run: |
          version=$(node -p 'require("./lerna.json").version')
          echo "::set-output name=LIB_VERSION::${version}"
          echo "Publishing DEV version - v${version}-alpha.${{ github.run_id }}"
          make move-package-json-to-dist
          make prerelease-version-upgrade-${version}-alpha.${{ github.run_id }}
          make pretty
          git add .
          git commit -m "chore: prelrease version"
          make publish-packages-next
        env:
          NPM_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

      - name : Notify Slack on alpha version deployment
        uses : rtCamp/action-slack-notify@v2
        env :
          SLACK_CHANNEL : frontegg-alpha-versions
          SLACK_COLOR : ${{ job.status }}
          SLACK_ICON : https://avatars.githubusercontent.com/u/67857107?s=40&v=4
          SLACK_MESSAGE : '${{ steps.publish_pre_release_version.outputs.LIB_VERSION }}-alpha.${{ github.run_id }} has been released :rocket:'
          SLACK_TITLE : 'A new @frontegg/react alpha version!'
          SLACK_USERNAME : ${{ github.actor }}
          SLACK_WEBHOOK : ${{ secrets.ROTEM_SLACK_WEBHOOK }}
          MSG_MINIMAL : true
